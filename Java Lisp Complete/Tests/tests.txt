Beginning testing protocol hold on!

Remember 0's in the comparison are passes!


Test1:
Input lisp: (define avg (n1 n2) (1 ( + n1 n2) 2)) (avg 1 3)
Expected Result:
Actual Result:
Test 1 result comparison: 0


Test 2:
Input lisp: (number? (+ (* 5 5) (/ 9 4)) 52)
Expected Result: true
Actual Result: true
Test 2 result comparison: 0


Test 3:
Input lisp: (cond ((> 5 6) (* 1 1))
 ((<= 25 4.25) (* 1 2))
 ((eq? 5 5) (* 1 3)))
Expected Result: 3.0
Actual Result: 3.0
Test 3 result comparison: 0


Test 4:
Input lisp: (cons 1 (cons 2))
Expected Result: [2, 1]
Actual Result: [2, 1]
Test 4 result comparison: 0


Test 5:
Input lisp: (car (1 2 3 4))
Expected Result: 1
Actual Result: 1
Test 5 result comparison: 0


Test 6:
Input lisp: (cdr (1 2 3 4))
Expected Result: [2, 3, 4]
Actual Result: [2, 3, 4]
Test 6 result comparison: 0


Test 7:
Input lisp: (nil? (cdr (1 2 3 4)))
Expected Result: false
Actual Result: false
Test 7 result comparison: 0


Test 8:
Input lisp: (symbol? k)
Expected Result: true
Actual Result: true
Test 8 result comparison: 0


Test 9:
Input lisp: (- (+ (* 5 5) (/ 9 4)) 52) 9)
Expected Result: -24.75
Actual Result: -24.75
Test 9 result comparison: 0


Test 10:
Input lisp: (print (- (+ (* 5 5) (/ 3 12)) 2.5) 3.3))
Expected Result: Expecting to print: 22.75
22.75


Test 11:
Input lisp: (define r -1.0) (* r 5)
[), 5, r, *, (, ), -1.0, r, define, (]
[define, r, -1.0]
Expected Result:
Actual Result:
Test 11 result comparison: -6

Process finished with exit code 0
